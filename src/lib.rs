pub mod messages;
pub mod records;
pub mod utils;
pub mod zone;
pub mod journal;

#[cfg(test)]
mod tests {
    use crate::messages::inter::rr_classes::RRClasses;
    use crate::messages::message::Message;
    use crate::zone::zone_store::ZoneStore;


    //REDO
    // QP-TRIE
    // NAME_LIST

    //CLEAN UP OCTALS, HEX, BASE64, BASE32 parsing
    //CLEAN UP COORD UTILS

    //ADD JNL AND ZONE WRITERS...

    //CLEAN UP JNL & ZONER READERS





    //Don't use hashmaps or indexmaps or btreemaps at all


    //WE NEED TO VERIFY NO COLLISIONS WITH SETS AND WITH ZONES IN STORE

    //REMOVE HASHMAP FOR POSITION POINTERS WHEN ENCODING


    //NEVER PANIC

    //DONT USE UNWRAPS - MODIFY ALL ENUMS DOING IT - THEN CHANGE io::Result for from_bytes on Message to our own Result




    #[test]
    fn encode_and_decode() {
        ////JUST QUERY
        //let x = vec![ 0x79, 0xe2, 0x1, 0x20, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x35, 0x0, 0x1 ];

        ////A & OPT
        //let x = vec![ 0xa7, 0xa2, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x23, 0x00, 0x04, 0x8e, 0xfa, 0x45, 0xee, 0x00, 0x00, 0x29, 0x04, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

        ////A
        //let x = vec![ 0xa7, 0xa2, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x23, 0x00, 0x04, 0x8e, 0xfa, 0x45, 0xee ];

        ////URI
        //let x = vec![ 0x8e, 0x39, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x00, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x1, 0x0, 0x0, 0x1, 0xc0, 0xc, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x16, 0x0, 0x1, 0x0, 0x1, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3a, 0x2f, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72 ];

        ////LOC
        //let x = vec![ 0xb6, 0x23, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x1d, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x1d, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x67, 0x2d, 0xa0, 0x9c, 0xf7, 0xc5, 0x80, 0x0, 0x98, 0x96, 0x80 ];

        ////ANY
        //let x = vec![ 0x9c, 0x84, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0xff, 0x0, 0x1, 0xc0, 0xc, 0x0, 0xd, 0x0, 0x1, 0x0, 0x0, 0xe, 0x10, 0x0, 0x9, 0x7, 0x52, 0x46, 0x43, 0x38, 0x34, 0x38, 0x32, 0x0, 0x0, 0x0, 0x29, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x32, 0x0, 0xf, 0x0, 0x2e, 0x0, 0x15, 0x54, 0x79, 0x70, 0x65, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2c, 0x20, 0x52, 0x46, 0x43, 0x38, 0x34, 0x38, 0x32 ];

        ////SSHFP
        //let x = vec![ 0x45, 0xe, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x2c, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x2c, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x16, 0x1, 0x2, 0x8b, 0x9f, 0x2f, 0x2b, 0x6b, 0x3b, 0x6, 0xe3, 0xd8, 0x9f, 0x54, 0xd0, 0x73, 0xd, 0xce, 0x5b, 0x4, 0x26, 0xf8, 0x8c, 0x0, 0x0, 0x29, 0x4, 0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 ];

        ////HTTPS
        //let x = vec![ 0x63, 0xeb, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x41, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x41, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x8d, 0x0, 0x1, 0x3, 0x77, 0x77, 0x77, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x6, 0x2, 0x68, 0x33, 0x2, 0x68, 0x32, 0x0, 0x4, 0x0, 0x8, 0x68, 0x15, 0x2a, 0x89, 0xac, 0x43, 0xce, 0x1c, 0x0, 0x5, 0x0, 0x47, 0x0, 0x45, 0xfe, 0xd, 0x0, 0x41, 0xda, 0x0, 0x20, 0x0, 0x20, 0xad, 0xee, 0x8b, 0x18, 0xce, 0xda, 0xba, 0x2b, 0x15, 0xe4, 0x6e, 0x16, 0x57, 0xc1, 0xf4, 0x91, 0x27, 0x41, 0xc0, 0xd8, 0xbf, 0x6, 0x22, 0x55, 0xa1, 0xd6, 0x80, 0x27, 0x63, 0x7e, 0x4e, 0x10, 0x0, 0x4, 0x0, 0x1, 0x0, 0x1, 0x0, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x0, 0x6, 0x0, 0x20, 0x26, 0x6, 0x47, 0x0, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x15, 0x2a, 0x89, 0x26, 0x6, 0x47, 0x0, 0x30, 0x35, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac, 0x43, 0xce, 0x1c ];

        ////TKEY & TSIG
        //let x = vec![ 0x2, 0x34, 0x80, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0xa, 0x33, 0x32, 0x35, 0x39, 0x33, 0x36, 0x35, 0x39, 0x35, 0x34, 0x13, 0x73, 0x69, 0x67, 0x2d, 0x77, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x37, 0x62, 0x6f, 0x30, 0x30, 0x33, 0x73, 0x70, 0x6f, 0x8, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x73, 0x74, 0x3, 0x6c, 0x61, 0x6e, 0x0, 0x0, 0xf9, 0x0, 0xff, 0xc0, 0xc, 0x0, 0xf9, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0x8, 0x67, 0x73, 0x73, 0x2d, 0x74, 0x73, 0x69, 0x67, 0x0, 0x50, 0xf8, 0xcf, 0xbb, 0x50, 0xfa, 0x21, 0x3b, 0x0, 0x3, 0x0, 0x0, 0x0, 0xba, 0xa1, 0x81, 0xb7, 0x30, 0x81, 0xb4, 0xa0, 0x3, 0xa, 0x1, 0x0, 0xa1, 0xb, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x12, 0x1, 0x2, 0x2, 0xa2, 0x81, 0x9f, 0x4, 0x81, 0x9c, 0x60, 0x81, 0x99, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x12, 0x1, 0x2, 0x2, 0x2, 0x0, 0x6f, 0x81, 0x89, 0x30, 0x81, 0x86, 0xa0, 0x3, 0x2, 0x1, 0x5, 0xa1, 0x3, 0x2, 0x1, 0xf, 0xa2, 0x7a, 0x30, 0x78, 0xa0, 0x3, 0x2, 0x1, 0x12, 0xa2, 0x71, 0x4, 0x6f, 0x32, 0x94, 0x40, 0xf8, 0xae, 0xaa, 0xbd, 0xa2, 0x9e, 0x7e, 0x78, 0x1d, 0xf, 0xf0, 0x9b, 0xae, 0x14, 0x5c, 0x99, 0xc1, 0xdc, 0xb6, 0xc7, 0xa0, 0xbd, 0x7a, 0x83, 0xed, 0x18, 0xb, 0xf9, 0xea, 0xa0, 0x29, 0x1f, 0xe, 0x82, 0xd8, 0x2f, 0x1d, 0x59, 0xb9, 0xda, 0x97, 0x41, 0xf2, 0x7b, 0xab, 0xa2, 0xdb, 0x38, 0xe9, 0xcd, 0xfe, 0x27, 0xb3, 0xbf, 0x13, 0xa, 0xeb, 0xde, 0xa7, 0x7e, 0x55, 0x1a, 0x6c, 0xff, 0x2d, 0x64, 0xfb, 0xfc, 0x56, 0x52, 0xb5, 0xc8, 0x28, 0x7, 0x17, 0x6c, 0xe7, 0x57, 0xe5, 0xf5, 0xaa, 0xd5, 0x84, 0x18, 0x80, 0x21, 0xa1, 0xd9, 0xdd, 0x3, 0x82, 0xf1, 0xcf, 0x1b, 0xe6, 0x17, 0x97, 0xee, 0x2b, 0xdd, 0x27, 0x80, 0xea, 0x42, 0xde, 0xc8, 0x57, 0x8a, 0x0, 0x0, 0xc0, 0xc, 0x0, 0xfa, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0xc0, 0x49, 0x0, 0x0, 0x50, 0xf8, 0xcf, 0xbb, 0x8c, 0xa0, 0x0, 0x1c, 0x4, 0x4, 0x5, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x73, 0x28, 0x5d, 0xa, 0x2d, 0xf4, 0xa3, 0x34, 0x2f, 0xcf, 0x1, 0x6f, 0x3c, 0x9f, 0x76, 0x82, 0x2, 0x34, 0x0, 0x0, 0x0, 0x0 ];

        ////NAPTR
        //let x = vec![ 0x3a, 0x31, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x23, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x23, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x2b, 0x0, 0x64, 0x0, 0xa, 0x3, 0x55, 0x2c, 0x50, 0x7, 0x45, 0x32, 0x55, 0x2b, 0x73, 0x69, 0x70, 0x19, 0x21, 0x5e, 0x2e, 0x2a, 0x24, 0x21, 0x73, 0x69, 0x70, 0x3a, 0x69, 0x6e, 0x66, 0x6f, 0x40, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x2e, 0x6e, 0x65, 0x74, 0x21, 0x0 ];

        ////SMIMEA
        //let x = vec![ 0x79, 0xe2, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x35, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x35, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x1a, 0x1, 0x2, 0x3, 0x30, 0x25, 0x1f, 0xd9, 0x47, 0x7c, 0xfd, 0x17, 0x6a, 0x98, 0x3a, 0x34, 0xe1, 0x90, 0xbb, 0x7d, 0xa3, 0xc2, 0xf3, 0x7c, 0xa, 0xba, 0x95 ];

        ////SVCB
        //let x = vec![ 0x4f, 0x26, 0x85, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5, 0x66, 0x69, 0x6e, 0x64, 0x39, 0x3, 0x6e, 0x65, 0x74, 0x0, 0x0, 0x40, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x40, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x2e, 0x0, 0x1, 0x3, 0x77, 0x77, 0x77, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x6, 0x2, 0x68, 0x33, 0x2, 0x68, 0x32, 0x0, 0x4, 0x0, 0x4, 0x7f, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 ];

        //let message = Message::from_bytes(&x).unwrap();

        //println!("{}", message);

        //assert_eq!(x, message.to_bytes(512));
    }

    #[test]
    fn parsing() {
        let mut store = ZoneStore::new();
        store.open("/home/brad/Downloads/find9.net.test.zone", "find9.net", RRClasses::In).unwrap();

        //println!("{:?}", store.get_deepest_zone("x1.find9.net"));
        //println!("{:?}", store.get_deepest_zone_with_name("find9.net"));
        //println!("{:?}", store.get_zone_exact("find9.net").unwrap().get_all_records(""));
        //println!("{:?}", store.get_zone_exact("find9.net").unwrap().get_records(&RRQuery::new("", RRTypes::A, RRClasses::In)));
    }
}
